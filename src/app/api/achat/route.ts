import { NextResponse } from "next/server";
import prisma from "@/lib/prisma";

export async function POST(req: Request) {
  try {
    // üü¢ R√©cup√©ration des donn√©es envoy√©es par le client
    const { nom, prenom, wilaya, ville, telephone, totalMontant, articles } = await req.json();

    console.log("Donn√©es re√ßues :", { nom, prenom, wilaya, ville, telephone, totalMontant, articles });

    // üõë V√©rification que les donn√©es ne sont pas nulles
    if (!nom || !prenom || !wilaya || !ville || !telephone || !totalMontant || !articles || articles.length === 0) {
      return NextResponse.json({ error: "Donn√©es invalides ou incompl√®tes" }, { status: 400 });
    }

    // üîπ V√©rification des stocks avant de cr√©er l'achat
    for (const article of articles) {
      const stock = await prisma.article.findUnique({
        where: { id: article.id },
        select: { titre: true, quantit√©: true } // R√©cup√©rer aussi le titre
      });
    
      if (!stock || stock.quantit√© < article.quantit√©) {
        return NextResponse.json(
          { error: `Stock insuffisant pour l'article "${stock?.titre || 'Inconnu'}" RESSAYEZ PLUS TARD ! ` },
          { status: 400 }
        );
      }
    }

    // üî• Cr√©ation de l'achat
    const achat = await prisma.achat.create({
      data: {
        nom,
        prenom,
        wilaya,
        ville,
        telephone,
        totalMontant: parseFloat(totalMontant), // üõ† Convertir en nombre pour √©viter les erreurs
      },
    });

    console.log("‚úÖ Achat cr√©√© avec succ√®s :", achat);

    // üîπ Ajout des articles dans `ArticleAchat` et mise √† jour des stocks
    for (const article of articles) {
      await prisma.articleAchat.create({
        data: {
          achatId: achat.id,
          articleId: article.id,
          quantit√©: article.quantit√©,
          prix: article.prix,
        },
      });

      console.log(`‚úÖ Article ajout√© (ID: ${article.id}, Quantit√©: ${article.quantit√©})`);

      // üî• Mise √† jour du stock de l'article
      await prisma.article.update({
        where: { id: article.id },
        data: { quantit√©: { decrement: article.quantit√© } },
      });

      console.log(`‚úÖ Stock mis √† jour pour l'article ID: ${article.id}`);
    }

    // üîπ R√©ponse avec l'achat et les articles associ√©s
    return NextResponse.json({ message: "Achat enregistr√© avec succ√®s", achat }, { status: 201 });

  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation de l'achat :", error);
    return NextResponse.json(
      { error: "Erreur lors de la cr√©ation de l'achat", details: (error as Error).message },
      { status: 500 }
    );
  }
}

// üìå R√©cup√©rer les achats en attente
export async function GET() {
  try {
    const achats = await prisma.achat.findMany({
      where: { valid√©: false },
      include: {
        articles: {
          include: { article: true },
        },
      },
    });

    // ‚úÖ V√©rifier si la r√©ponse est vide
    if (!achats || achats.length === 0) {
      return NextResponse.json([], { status: 200 }); // Retourne un tableau vide au lieu de `null`
    }

    return NextResponse.json(achats, { status: 200 });
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des achats :", error);
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 });
  }
}

// üìå Mettre √† jour (valider/refuser) un achat
export async function PATCH(req: Request) {
  try {
    const { id, action } = await req.json(); // R√©cup√©rer l'ID et l'action (valider/refuser)

    const achat = await prisma.achat.findUnique({
      where: { id: Number(id) },
      include: { articles: true },
    });

    if (!achat) {
      return NextResponse.json({ error: "Achat introuvable" }, { status: 404 });
    }

    if (action === "valider") {
      // Valider l'achat : mettre `valid√©` √† `true` et r√©duire le stock
      await prisma.achat.update({
        where: { id: Number(id) },
        data: { valid√©: true },
      });

      for (const articleAchat of achat.articles) {
        await prisma.article.update({
          where: { id: articleAchat.articleId },
          data: { quantit√©: { decrement: articleAchat.quantit√© } },
        });
      }

      return NextResponse.json({ message: "Achat valid√© avec succ√®s" });
    }

    if (action === "refuser") {
      // Refuser l'achat : remettre les articles en stock et supprimer l'achat
      for (const articleAchat of achat.articles) {
        await prisma.article.update({
          where: { id: articleAchat.articleId },
          data: { quantit√©: { increment: articleAchat.quantit√© } },
        });
      }

      await prisma.achat.delete({ where: { id: Number(id) } });

      return NextResponse.json({ message: "Achat refus√© et stock mis √† jour" });
    }

    return NextResponse.json({ error: "Action invalide" }, { status: 400 });
  } catch (error) {
    return NextResponse.json({ error: "Erreur lors de la mise √† jour de l'achat" }, { status: 500 });
  }
}

export async function PUT(req: Request) {
  try {
    const { achatId, action } = await req.json(); // R√©cup√©rer l'ID de l'achat et l'action

    if (!achatId || !["valider", "refuser"].includes(action)) {
      return NextResponse.json({ error: "Donn√©es invalides" }, { status: 400 });
    }

    // üîπ Trouver l'achat concern√©
    const achat = await prisma.achat.findUnique({
      where: { id: achatId },
      include: { articles: true },
    });

    if (!achat) {
      return NextResponse.json({ error: "Achat non trouv√©" }, { status: 404 });
    }

    if (action === "valider") {
      // ‚úÖ Valider l'achat (mettre `valid√© = true`)
      await prisma.achat.update({
        where: { id: achatId },
        data: { valid√©: true },
      });

      return NextResponse.json({ message: "Achat valid√© avec succ√®s" }, { status: 200 });
    } else if (action === "refuser") {
      // üöÄ Refuser l'achat et remettre les stocks
      for (const item of achat.articles) {
        await prisma.article.update({
          where: { id: item.articleId },
          data: {
            quantit√©: {
              increment: item.quantit√©, // üî• Remet les produits en stock
            },
          },
        });
      }

      return NextResponse.json({ message: "Achat refus√© et stock mis √† jour" }, { status: 200 });
    }
  } catch (error) {
    console.error("Erreur PUT achat:", error);
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 });
  }
}
